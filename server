import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

public class TicTacToeServer {
    // 방 정보를 저장하는 ConcurrentHashMap으로 다중 스레드 환경에서도 안전하게 관리
    private static Map<String, RoomThread> rooms = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(12345)) {
            System.out.println("Server started. Waiting for clients...");
            while (true) {
                // 클라이언트 연결을 기다림
                Socket clientSocket = serverSocket.accept();
                // 연결된 클라이언트를 처리하기 위해 새로운 스레드 생성
                new Thread(new ClientHandler(clientSocket)).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 클라이언트를 처리하는 스레드
    static class ClientHandler implements Runnable {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;
        private RoomThread joinedRoom; // 클라이언트가 참가한 방 참조

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                // 클라이언트와 통신을 위한 스트림 설정
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                String input;
                // 클라이언트로부터 메시지를 읽어서 처리
                while ((input = in.readLine()) != null) {
                    String[] parts = input.split(" ", 2); // 명령어와 인자를 분리
                    String command = parts[0];
                    String argument = parts.length > 1 ? parts[1] : ""; // 인자가 없을 경우 빈 문자열

                    switch (command) {
                        case "CREATE":
                            createRoom(argument);
                            break;
                        case "JOIN":
                            joinRoom(argument);
                            break;
                        case "MOVE":
                            handleMove(argument);
                            break;
                        default:
                            out.println("ERROR Unknown command."); // 알 수 없는 명령어에 대한 응답
                            break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    // 연결 종료 시 클라이언트를 방에서 제거
                    if (joinedRoom != null) {
                        joinedRoom.removeClient(out);
                    }
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        private void createRoom(String roomName) {
            // 방 생성: 고유한 ID를 생성하여 새로운 방을 생성
            String roomId = UUID.randomUUID().toString();
            RoomThread room = new RoomThread(roomId);
            rooms.put(roomId, room); // 생성된 방을 방 목록에 추가
            new Thread(room).start(); // 방 스레드 시작
            out.println("ROOM_CREATED " + roomId); // 클라이언트에 방 ID 전송
        }

        private void joinRoom(String roomId) {
            // 클라이언트가 특정 방에 참가하려는 요청 처리
            RoomThread room = rooms.get(roomId);
            if (room != null) {
                if (room.addClient(socket, out)) { // 방에 참가 성공 여부 확인
                    joinedRoom = room; // 클라이언트가 참여한 방 참조
                } else {
                    out.println("ERROR Room is full or game in progress.");
                }
            } else {
                out.println("ERROR Room not found."); // 방이 존재하지 않을 경우 에러 메시지 전송
            }
        }

        private void handleMove(String move) {
            if (joinedRoom != null) {
                joinedRoom.processMove(out, move); // 방 스레드로 MOVE 요청 전달
            } else {
                out.println("ERROR You are not in a room.");
            }
        }
    }

    // 방을 관리하는 스레드
    static class RoomThread implements Runnable {
        private String roomId; // 방 ID
        private List<PrintWriter> clients = new ArrayList<>(); // 방에 연결된 클라이언트 목록
        private char[][] board = new char[3][3]; // 틱택토 보드
        private char currentPlayer = 'X'; // 현재 차례의 플레이어 ('X' 또는 'O')
        private boolean gameInProgress = false; // 게임 진행 상태 플래그

        public RoomThread(String roomId) {
            this.roomId = roomId;
            // 보드 초기화
            for (int i = 0; i < 3; i++) {
                Arrays.fill(board[i], ' ');
            }
        }

        public synchronized boolean addClient(Socket socket, PrintWriter out) {
            // 방에 클라이언트를 추가
            if (clients.size() >= 2 || gameInProgress) {
                return false; // 방이 가득 찼거나 게임이 이미 시작된 경우
            }
            clients.add(out);
            out.println("JOINED " + roomId); // 참가 성공 메시지 전송
            if (clients.size() == 2) {
                gameInProgress = true; // 두 명이 모이면 게임 시작
                broadcast("GAME_START " + currentPlayer);
            }
            return true;
        }

        public synchronized void removeClient(PrintWriter out) {
            // 클라이언트를 방에서 제거
            clients.remove(out);
            if (clients.isEmpty()) {
                gameInProgress = false; // 방이 비면 게임 종료
            }
        }

        public synchronized void processMove(PrintWriter playerOut, String move) {
            // MOVE 명령 처리
            if (!gameInProgress) {
                playerOut.println("ERROR Game is not in progress.");
                return;
            }

            String[] parts = move.split(",");
            if (parts.length != 2) {
                playerOut.println("ERROR Invalid move format.");
                return;
            }

            int x, y;
            try {
                x = Integer.parseInt(parts[0]);
                y = Integer.parseInt(parts[1]);
            } catch (NumberFormatException e) {
                playerOut.println("ERROR Invalid move coordinates.");
                return;
            }

            if (x < 0 || x >= 3 || y < 0 || y >= 3 || board[x][y] != ' ') {
                playerOut.println("ERROR Invalid move.");
                return;
            }

            // 유효한 움직임이면 보드 업데이트
            board[x][y] = currentPlayer;
            broadcast("MOVE " + x + "," + y + " " + currentPlayer);

            // 승리 조건 확인
            if (checkWin(currentPlayer)) {
                broadcast("RESULT " + currentPlayer + " wins!");
                gameInProgress = false;
                return;
            }

            // 무승부 조건 확인
            if (isBoardFull()) {
                broadcast("RESULT Draw!");
                gameInProgress = false;
                return;
            }

            // 턴 교대
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            broadcast("TURN " + currentPlayer);
        }

        private boolean checkWin(char player) {
            // 승리 조건 확인
            for (int i = 0; i < 3; i++) {
                if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) || // 행
                    (board[0][i] == player && board[1][i] == player && board[2][i] == player)) { // 열
                    return true;
                }
            }
            // 대각선
            return (board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
                   (board[0][2] == player && board[1][1] == player && board[2][0] == player);
        }

        private boolean isBoardFull() {
            // 보드가 가득 찼는지 확인
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == ' ') {
                        return false;
                    }
                }
            }
            return true;
        }

        public synchronized void broadcast(String message) {
            // 방 내 모든 클라이언트에게 메시지 전송
            for (PrintWriter client : clients) {
                client.println(message);
            }
        }

        @Override
        public void run() {
            // 방 스레드가 지속적으로 동작할 필요가 없으므로 여기에 특별한 로직 없음
        }
    }
}
